version: '3.8'

services:
  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sierra-sync-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - api1
      - api2
      - api3
      - web1
      - web2
    networks:
      - sierra-sync-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: sierra-sync-certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - sierra-sync-network

  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15-alpine
    container_name: sierra-sync-postgres-primary
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_REPLICATION_MODE=master
      - POSTGRES_REPLICATION_USER=${DB_REPL_USER}
      - POSTGRES_REPLICATION_PASSWORD=${DB_REPL_PASSWORD}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
    ports:
      - "5432:5432"
    networks:
      - sierra-sync-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Replica (Read-only)
  postgres-replica:
    image: postgres:15-alpine
    container_name: sierra-sync-postgres-replica
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_REPLICATION_MODE=slave
      - POSTGRES_MASTER_HOST=postgres-primary
      - POSTGRES_MASTER_PORT=5432
      - POSTGRES_REPLICATION_USER=${DB_REPL_USER}
      - POSTGRES_REPLICATION_PASSWORD=${DB_REPL_PASSWORD}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    depends_on:
      - postgres-primary
    networks:
      - sierra-sync-network

  # Redis Master
  redis-master:
    image: redis:7-alpine
    container_name: sierra-sync-redis-master
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_master_data:/data
    ports:
      - "6379:6379"
    networks:
      - sierra-sync-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Replica
  redis-replica:
    image: redis:7-alpine
    container_name: sierra-sync-redis-replica
    restart: always
    command: redis-server --replicaof redis-master 6379 --requirepass ${REDIS_PASSWORD} --masterauth ${REDIS_PASSWORD}
    volumes:
      - redis_replica_data:/data
    depends_on:
      - redis-master
    networks:
      - sierra-sync-network

  # n8n Workflow Engine
  n8n:
    image: n8nio/n8n:latest
    container_name: sierra-sync-n8n
    restart: always
    environment:
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres-primary
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${DB_NAME}
      - DB_POSTGRESDB_USER=${DB_USER}
      - DB_POSTGRESDB_PASSWORD=${DB_PASSWORD}
      - N8N_METRICS=true
      - N8N_METRICS_PREFIX=n8n_
      - EXECUTIONS_PROCESS=main
      - N8N_LOG_LEVEL=warn
      - N8N_PERSONALIZATION_ENABLED=false
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-workflows:/home/node/workflows
    depends_on:
      - postgres-primary
      - redis-master
    networks:
      - sierra-sync-network
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Backend Instances (3 for load balancing)
  api1:
    build:
      context: ./src/api
      dockerfile: Dockerfile.prod
    container_name: sierra-sync-api1
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-primary:5432/${DB_NAME}
      - DATABASE_REPLICA_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-replica:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-master:6379
      - N8N_API_URL=http://n8n:5678
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - postgres-primary
      - redis-master
      - n8n
    networks:
      - sierra-sync-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  api2:
    build:
      context: ./src/api
      dockerfile: Dockerfile.prod
    container_name: sierra-sync-api2
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-primary:5432/${DB_NAME}
      - DATABASE_REPLICA_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-replica:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-master:6379
      - N8N_API_URL=http://n8n:5678
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - postgres-primary
      - redis-master
      - n8n
    networks:
      - sierra-sync-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  api3:
    build:
      context: ./src/api
      dockerfile: Dockerfile.prod
    container_name: sierra-sync-api3
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-primary:5432/${DB_NAME}
      - DATABASE_REPLICA_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-replica:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-master:6379
      - N8N_API_URL=http://n8n:5678
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - postgres-primary
      - redis-master
      - n8n
    networks:
      - sierra-sync-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web UI Instances (2 for load balancing)
  web1:
    build:
      context: ./web-ui
      dockerfile: Dockerfile.prod
    container_name: sierra-sync-web1
    restart: always
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://sierrasync.com/api
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN}
    depends_on:
      - api1
      - api2
      - api3
    networks:
      - sierra-sync-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  web2:
    build:
      context: ./web-ui
      dockerfile: Dockerfile.prod
    container_name: sierra-sync-web2
    restart: always
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://sierrasync.com/api
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN}
    depends_on:
      - api1
      - api2
      - api3
    networks:
      - sierra-sync-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: sierra-sync-prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - sierra-sync-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: sierra-sync-grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-app
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3030:3000"
    depends_on:
      - prometheus
    networks:
      - sierra-sync-network

  # Log Aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: sierra-sync-loki
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - sierra-sync-network

  # Log Shipper - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: sierra-sync-promtail
    restart: always
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - sierra-sync-network

volumes:
  postgres_primary_data:
  postgres_replica_data:
  redis_master_data:
  redis_replica_data:
  n8n_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  sierra-sync-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16